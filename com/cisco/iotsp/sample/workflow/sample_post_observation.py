from com.cisco.iotsp.helper import authentication_helper
from com.cisco.iotsp.sample import sample_thing_credentials_create
from com.cisco.iotsp.sample import sample_http_device_connector
from com.cisco.iotsp.sample import sample_last_n_observations
from com.cisco.iotsp.sample import sample_things_create
import os.path
import os
import time

class SamplePostObservation(object):
    def __init__(self, service_address, user_account_access_token):
        print('Post Observation tp %s' % service_address)

        host = 'https://' + service_address

        self._service_address = service_address;
        self._user_account_access_token = user_account_access_token

    def postMessage(self, account_alias):
        try :

            '''
            Step 1. Create thing
			'''
            thing_api = sample_things_create.SampleThingsCreate(self._service_address, self._user_account_access_token)
            parent = os.path.normpath(os.path.join(os.getcwd(), ".."))
            file_thing = os.path.join(parent, 'sample', 'data', 'sampleThing.json')
            thing_uid = thing_api.create_thing(file_thing, account_alias)
            time.sleep(1)

            '''
            Step 2. create a credential for the device.
			thingUid : devicce uid generated by IoTSP
			secret: user specified string that is used as credential for the device
			'''
            secret = 'myDeviceSecret'
            thing_credentials_api = sample_thing_credentials_create.SampleThingCredentialsCreate(self._service_address, self._user_account_access_token);
            thing_credentials_api.createCredential(thing_uid, secret)

            time.sleep(1)
            '''
            Step 3. get OAuth2 access token for the device
            thingUid: used as the user name to get device access token
            Secret: used as password to get the device access token
            clientID: for device, it's hard coded to "iotspdeviceoauth2client" for now.
            clientSecret: for device, it's hard coded to "iotspdeviceoauth2client" for now.
            '''
            device_access_token = authentication_helper.AuthenticationHelper.get_token(self._service_address , thing_uid, secret, "iotspdeviceoauth2client", "iotspdeviceoauth2client");
            print("\nDevice access token is {0}".format(device_access_token))

            '''
            Step 4. use device access token to post observation, by calling http device connector service
            '''
            data = {"messages": [{"data": {
                "atm-sensor-reading": {"amount": "2", "account-id": "481730", "transaction-time": "1469208709759"},
                "count": "21"}, "ts": 1469208709760, "format": "json"}, {"data": {
                "farm-sensor-reading": {"temperature": "3", "humidity": "4", "soil-moisture": "5"}, "wind": "2"},
                                                                         "ts": 1469208709760, "format": "json"}]}

            connect_api = sample_http_device_connector.SampleHttpDeviceConnector(self._service_address, device_access_token);
            connect_api.postMessage(data, thing_uid)

            '''
            Step 5. get last N observations to verify post was indeed successful
            '''
            time.sleep(1)
            observ = sample_last_n_observations.SampleLastNObservations(self._service_address, self._user_account_access_token)
            observ.get_lastNObservations(thing_uid)
            return True
        except ApiException as ae:
            print("\n--- postMessage failed!!! ---")
            print ("status = {0}, reason = {1} \nheads = {2} \n message ={3}".format(ae.status, ae.reason, ae.headers,
                                                                                     ae.message))
            return False
        except Exception as e:
            print("\n--- postMessage failed!!! ---")
            print(e.message)
            return False

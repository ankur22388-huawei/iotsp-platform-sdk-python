#Copyright (c) 2016 by Cisco Systems, Inc. All rights reserved.
import string
import json
import os.path
import os

from com.cisco.iotsp.sdk.things.client import *
from com.cisco.iotsp.sdk.things.client.models import *
from com.cisco.iotsp.sample import sample_schemas
from com.cisco.iotsp.sample import sample_schemas_create
from com.cisco.iotsp.sdk.things.client.rest import ApiException
import pkg_resources
class SampleExtendThings(object):
    def __init__(self, service_address, access_token):
        print('Extend Thing properties at %s' % service_address)

        host = 'https://' + service_address
        self._api = ThingsApi()
        self._api.api_client.host = host
        self._service_addr = service_address
        self._token = access_token
        configuration.access_token = access_token

    def merge_thing(self):
        try :
            device_manufacture_id = 'a151c893-c7bc-48d6-8494-7e7775dcf3e5'
            basepath = os.path.dirname(__file__)
            parent = os.path.abspath(os.path.join(basepath, ".."))
            new_schema_file_path = os.path.join(parent,  'data', 'sampleSchemaLocation.json')
            thing_merge_file_path = os.path.join(parent, 'data', 'sampleThingMerge.json')

            #Create schema, that defines the syntax of device's new properties
            schema_create_api = sample_schemas_create.SampleSchemasCreate(self._service_addr, self._token)
            #scheam_uid = schema_create_api.creat_schema(schema_model)
            scheam_uid = schema_create_api.creat_schema_from_file(new_schema_file_path)



            # Get things by a specific manufacture ID
            by_man_things = self._api.get_things(key="uniqueIdentifiers.manufacturingId", value=device_manufacture_id,
                                                 sort_key="uniqueIdentifiers.serialNumber", sort_order="Ascending",
                                                 limit=20, offset=0)
            thing = by_man_things.items[0]
            thing_uid = thing.uid
            with open(thing_merge_file_path) as data_file:
                root_map = json.load(data_file)
            request = ThingUpdateRequest()

            #The file sampleSchemaLocation.json contains symbolic schema uid
			#Replace it with the actual schema uid, that is generated by the system
            sec_schema_list = root_map['sectionSchemas']
            for sec_schema in sec_schema_list:
                sec_schema['schemaUid'] = string.replace(sec_schema['schemaUid'], 'locationSchemaUid', scheam_uid)

            request.section_schemas = sec_schema_list
            request.sections = root_map['sections']

            #merge existing Thing object's peroperties with the new properteis defined in sampleThingMerge.json
            updated_thing = self._api.merge_thing(thing_uid, request)

            print("\n--- merge_thing is successful: ---")
            print("\n original thing is: ---\n {0}".format(thing))
            print("\n merged thing is: ---\n {0}".format(updated_thing))
            return True
        except ApiException as ae:
            print("\n--- merge_thing failed!!! ---")
            print ("status = {0}, reason = {1} \nheads = {2} \n message ={3}".format(ae.status, ae.reason, ae.headers, ae.message))
            return False
        except Exception as e:
            print("\n--- merge_thing failed!!! ---")
            print(e.message)
            return False

    def update_thing(self, account_alias):
        try:
            device_manufacture_id = 'a151c893-c7bc-48d6-8494-7e7775dcf3e5'
            basepath = os.path.dirname(__file__)
            parent = os.path.abspath(os.path.join(basepath, ".."))
            thing_update_file_path = os.path.join(parent, 'data', 'sampleThingUpdate.json')
            new_schema_file_path = os.path.join(parent, 'data', 'sampleSchemaLocation.json')

            # Create schema, that defines the syntax of device's new properties
            schema_create_api = sample_schemas_create.SampleSchemasCreate(self._service_addr, self._token)
            schema_create_api.creat_schema_from_file(new_schema_file_path)

            # Get things by a specific manufacture ID
            by_man_things = self._api.get_things(key="uniqueIdentifiers.manufacturingId", value=device_manufacture_id,
                                                 sort_key="uniqueIdentifiers.serialNumber", sort_order="Ascending",
                                                 limit=20, offset=0)

            #Device Manufacturing Id is unique, so there should be only one device
            thing = by_man_things.items[0]
            thing_uid = thing.uid
            with open(thing_update_file_path) as data_file:
                root_map = json.load(data_file)
            request = ThingUpdateRequest()

            # The schema uid is in the format of  "accountAlias~region~schemaName".
			# For now region is empty string. accountAliase is user specified string that is used when creating the account
			# The sampleThingUpdate.json file only contains theschemaName, the "accountAlias" has to be replaced with actual accountAlias
            sec_schema_list = root_map['sectionSchemas']
            for sec_schema in sec_schema_list:
                real_scheam_uid = string.replace(sec_schema['schemaUid'], 'accountAlias', account_alias)
                sec_schema['schemaUid'] = real_scheam_uid

            request.section_schemas = sec_schema_list
            request.sections = root_map['sections']

            updated_thing = self._api.update_thing(thing_uid, request)
            print("\n--- update_thing is successful: ---")
            print("\n original thing is: ---\n {0}".format(thing))
            print("\n updated thing is: ---\n {0}".format(updated_thing))
            return True
        except ApiException as ae:
            print("\n--- update_thing failed!!! ---")
            print ("status = {0}, reason = {1} \nheads = {2} \n message ={3}".format(ae.status, ae.reason, ae.headers, ae.message))
            return False
        except Exception as e:
            print("\n--- update_thing failed!!! ---")
            print(e.message)
            return False

#Copyright (c) 2016 by Cisco Systems, Inc. All rights reserved.
# coding: utf-8

"""
    API Documentation


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Schema(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, uid=None, name=None, schema_type=None, mandate_section_name=None, description=None, tag=None, schema=None):
        """
        Schema - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'uid': 'str',
            'name': 'str',
            'schema_type': 'str',
            'mandate_section_name': 'str',
            'description': 'str',
            'tag': 'str',
            'schema': 'dict(str, object)'
        }

        self.attribute_map = {
            'uid': 'uid',
            'name': 'name',
            'schema_type': 'schemaType',
            'mandate_section_name': 'mandateSectionName',
            'description': 'description',
            'tag': 'tag',
            'schema': 'schema'
        }

        self._uid = uid
        self._name = name
        self._schema_type = schema_type
        self._mandate_section_name = mandate_section_name
        self._description = description
        self._tag = tag
        self._schema = schema

    @property
    def uid(self):
        """
        Gets the uid of this Schema.


        :return: The uid of this Schema.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this Schema.


        :param uid: The uid of this Schema.
        :type: str
        """

        self._uid = uid

    @property
    def name(self):
        """
        Gets the name of this Schema.


        :return: The name of this Schema.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Schema.


        :param name: The name of this Schema.
        :type: str
        """

        self._name = name

    @property
    def schema_type(self):
        """
        Gets the schema_type of this Schema.


        :return: The schema_type of this Schema.
        :rtype: str
        """
        return self._schema_type

    @schema_type.setter
    def schema_type(self, schema_type):
        """
        Sets the schema_type of this Schema.


        :param schema_type: The schema_type of this Schema.
        :type: str
        """
        allowed_values = ["OBSERVATION", "THING", "DATA_PATH_PROFILE"]
        if schema_type not in allowed_values:
            raise ValueError(
                "Invalid value for `schema_type`, must be one of {0}"
                .format(allowed_values)
            )

        self._schema_type = schema_type

    @property
    def mandate_section_name(self):
        """
        Gets the mandate_section_name of this Schema.


        :return: The mandate_section_name of this Schema.
        :rtype: str
        """
        return self._mandate_section_name

    @mandate_section_name.setter
    def mandate_section_name(self, mandate_section_name):
        """
        Sets the mandate_section_name of this Schema.


        :param mandate_section_name: The mandate_section_name of this Schema.
        :type: str
        """

        self._mandate_section_name = mandate_section_name

    @property
    def description(self):
        """
        Gets the description of this Schema.


        :return: The description of this Schema.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Schema.


        :param description: The description of this Schema.
        :type: str
        """

        self._description = description

    @property
    def tag(self):
        """
        Gets the tag of this Schema.


        :return: The tag of this Schema.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this Schema.


        :param tag: The tag of this Schema.
        :type: str
        """

        self._tag = tag

    @property
    def schema(self):
        """
        Gets the schema of this Schema.


        :return: The schema of this Schema.
        :rtype: dict(str, object)
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """
        Sets the schema of this Schema.


        :param schema: The schema of this Schema.
        :type: dict(str, object)
        """

        self._schema = schema

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

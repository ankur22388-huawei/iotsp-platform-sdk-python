#Copyright (c) 2016 by Cisco Systems, Inc. All rights reserved.
# coding: utf-8

"""
    API documentation for User Service

    These are all the APIs for the User Service

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UserPolicyCreateObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, uid=None, name=None, policy_units=None):
        """
        UserPolicyCreateObject - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'uid': 'str',
            'name': 'str',
            'policy_units': 'list[UserPolicyUnit]'
        }

        self.attribute_map = {
            'uid': 'uid',
            'name': 'name',
            'policy_units': 'policyUnits'
        }

        self._uid = uid
        self._name = name
        self._policy_units = policy_units

    @property
    def uid(self):
        """
        Gets the uid of this UserPolicyCreateObject.


        :return: The uid of this UserPolicyCreateObject.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this UserPolicyCreateObject.


        :param uid: The uid of this UserPolicyCreateObject.
        :type: str
        """

        self._uid = uid

    @property
    def name(self):
        """
        Gets the name of this UserPolicyCreateObject.


        :return: The name of this UserPolicyCreateObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UserPolicyCreateObject.


        :param name: The name of this UserPolicyCreateObject.
        :type: str
        """

        self._name = name

    @property
    def policy_units(self):
        """
        Gets the policy_units of this UserPolicyCreateObject.


        :return: The policy_units of this UserPolicyCreateObject.
        :rtype: list[UserPolicyUnit]
        """
        return self._policy_units

    @policy_units.setter
    def policy_units(self, policy_units):
        """
        Sets the policy_units of this UserPolicyCreateObject.


        :param policy_units: The policy_units of this UserPolicyCreateObject.
        :type: list[UserPolicyUnit]
        """

        self._policy_units = policy_units

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

# coding: utf-8

"""
    API documentation for PresenceMgmt

    These are all the APIs for the Presence management

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PresenceView(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, thing_uid=None, keep_alive_receive_ts=None, observation_receive_ts=None):
        """
        PresenceView - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'thing_uid': 'str',
            'keep_alive_receive_ts': 'int',
            'observation_receive_ts': 'int'
        }

        self.attribute_map = {
            'thing_uid': 'thingUid',
            'keep_alive_receive_ts': 'keepAliveReceiveTs',
            'observation_receive_ts': 'observationReceiveTs'
        }

        self._thing_uid = thing_uid
        self._keep_alive_receive_ts = keep_alive_receive_ts
        self._observation_receive_ts = observation_receive_ts

    @property
    def thing_uid(self):
        """
        Gets the thing_uid of this PresenceView.


        :return: The thing_uid of this PresenceView.
        :rtype: str
        """
        return self._thing_uid

    @thing_uid.setter
    def thing_uid(self, thing_uid):
        """
        Sets the thing_uid of this PresenceView.


        :param thing_uid: The thing_uid of this PresenceView.
        :type: str
        """

        self._thing_uid = thing_uid

    @property
    def keep_alive_receive_ts(self):
        """
        Gets the keep_alive_receive_ts of this PresenceView.


        :return: The keep_alive_receive_ts of this PresenceView.
        :rtype: int
        """
        return self._keep_alive_receive_ts

    @keep_alive_receive_ts.setter
    def keep_alive_receive_ts(self, keep_alive_receive_ts):
        """
        Sets the keep_alive_receive_ts of this PresenceView.


        :param keep_alive_receive_ts: The keep_alive_receive_ts of this PresenceView.
        :type: int
        """

        self._keep_alive_receive_ts = keep_alive_receive_ts

    @property
    def observation_receive_ts(self):
        """
        Gets the observation_receive_ts of this PresenceView.


        :return: The observation_receive_ts of this PresenceView.
        :rtype: int
        """
        return self._observation_receive_ts

    @observation_receive_ts.setter
    def observation_receive_ts(self, observation_receive_ts):
        """
        Sets the observation_receive_ts of this PresenceView.


        :param observation_receive_ts: The observation_receive_ts of this PresenceView.
        :type: int
        """

        self._observation_receive_ts = observation_receive_ts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

#Copyright (c) 2016 by Cisco Systems, Inc. All rights reserved.
# coding: utf-8

"""
    API Documentation


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ThingsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_thing(self, thing_create_request, **kwargs):
        """
        Create new thing
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_thing(thing_create_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ThingCreateRequest thing_create_request: The thing to be created (required)
        :return: Thing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_thing_with_http_info(thing_create_request, **kwargs)
        else:
            (data) = self.create_thing_with_http_info(thing_create_request, **kwargs)
            return data

    def create_thing_with_http_info(self, thing_create_request, **kwargs):
        """
        Create new thing
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_thing_with_http_info(thing_create_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ThingCreateRequest thing_create_request: The thing to be created (required)
        :return: Thing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thing_create_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_thing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thing_create_request' is set
        if ('thing_create_request' not in params) or (params['thing_create_request'] is None):
            raise ValueError("Missing the required parameter `thing_create_request` when calling `create_thing`")

        resource_path = '/v1/thing-services/things'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'thing_create_request' in params:
            body_params = params['thing_create_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['tokenAuthScheme']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Thing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_thing(self, thing_uid, **kwargs):
        """
        Delete thing by thingUid
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_thing(thing_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str thing_uid: Uid of thing (required)
        :return: Thing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_thing_with_http_info(thing_uid, **kwargs)
        else:
            (data) = self.delete_thing_with_http_info(thing_uid, **kwargs)
            return data

    def delete_thing_with_http_info(self, thing_uid, **kwargs):
        """
        Delete thing by thingUid
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_thing_with_http_info(thing_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str thing_uid: Uid of thing (required)
        :return: Thing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thing_uid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_thing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thing_uid' is set
        if ('thing_uid' not in params) or (params['thing_uid'] is None):
            raise ValueError("Missing the required parameter `thing_uid` when calling `delete_thing`")

        resource_path = '/v1/thing-services/things/{thingUid}'.replace('{format}', 'json')
        path_params = {}
        if 'thing_uid' in params:
            path_params['thingUid'] = params['thing_uid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['tokenAuthScheme']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Thing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_next_scroll_page(self, next_scroll_id, **kwargs):
        """
        Get the next scroll page by scroll id
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_next_scroll_page(next_scroll_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str next_scroll_id: the next scrollId to retrieve the next page (required)
        :return: ScrollPageThing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_next_scroll_page_with_http_info(next_scroll_id, **kwargs)
        else:
            (data) = self.get_next_scroll_page_with_http_info(next_scroll_id, **kwargs)
            return data

    def get_next_scroll_page_with_http_info(self, next_scroll_id, **kwargs):
        """
        Get the next scroll page by scroll id
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_next_scroll_page_with_http_info(next_scroll_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str next_scroll_id: the next scrollId to retrieve the next page (required)
        :return: ScrollPageThing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['next_scroll_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_next_scroll_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'next_scroll_id' is set
        if ('next_scroll_id' not in params) or (params['next_scroll_id'] is None):
            raise ValueError("Missing the required parameter `next_scroll_id` when calling `get_next_scroll_page`")

        resource_path = '/v1/thing-services/things/actions/getNextScrollPage'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'next_scroll_id' in params:
            body_params = params['next_scroll_id']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['tokenAuthScheme']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ScrollPageThing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_scroll_id_by_filter(self, filter, **kwargs):
        """
        Get a scroll id for things by filter
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_scroll_id_by_filter(filter, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ThingScrollFilter filter: The filter criteria on which to return scroll Id (required)
        :return: ScrollId
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_scroll_id_by_filter_with_http_info(filter, **kwargs)
        else:
            (data) = self.get_scroll_id_by_filter_with_http_info(filter, **kwargs)
            return data

    def get_scroll_id_by_filter_with_http_info(self, filter, **kwargs):
        """
        Get a scroll id for things by filter
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_scroll_id_by_filter_with_http_info(filter, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ThingScrollFilter filter: The filter criteria on which to return scroll Id (required)
        :return: ScrollId
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scroll_id_by_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params) or (params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_scroll_id_by_filter`")

        resource_path = '/v1/thing-services/things/actions/getScrollIdByFilter'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['tokenAuthScheme']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ScrollId',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_thing(self, thing_uid, **kwargs):
        """
        Get thing by thingUid
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_thing(thing_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str thing_uid: Uid of thing (required)
        :return: Thing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_thing_with_http_info(thing_uid, **kwargs)
        else:
            (data) = self.get_thing_with_http_info(thing_uid, **kwargs)
            return data

    def get_thing_with_http_info(self, thing_uid, **kwargs):
        """
        Get thing by thingUid
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_thing_with_http_info(thing_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str thing_uid: Uid of thing (required)
        :return: Thing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thing_uid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_thing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thing_uid' is set
        if ('thing_uid' not in params) or (params['thing_uid'] is None):
            raise ValueError("Missing the required parameter `thing_uid` when calling `get_thing`")

        resource_path = '/v1/thing-services/things/{thingUid}'.replace('{format}', 'json')
        path_params = {}
        if 'thing_uid' in params:
            path_params['thingUid'] = params['thing_uid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['tokenAuthScheme']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Thing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_things(self, **kwargs):
        """
        Get a page of things by query params
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_things(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str key: a field key in thing. Nested fields can be . delimited
        :param str value: value for the key parameter.
        :param str sort_key: sort by a key in thing. Nested fields can be . delimited
        :param str sort_order: sort in ascending or descending order
        :param int limit: maximum number of things to return
        :param int offset: starting index of things in return payload
        :return: PageThing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_things_with_http_info(**kwargs)
        else:
            (data) = self.get_things_with_http_info(**kwargs)
            return data

    def get_things_with_http_info(self, **kwargs):
        """
        Get a page of things by query params
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_things_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str key: a field key in thing. Nested fields can be . delimited
        :param str value: value for the key parameter.
        :param str sort_key: sort by a key in thing. Nested fields can be . delimited
        :param str sort_order: sort in ascending or descending order
        :param int limit: maximum number of things to return
        :param int offset: starting index of things in return payload
        :return: PageThing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['key', 'value', 'sort_key', 'sort_order', 'limit', 'offset']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_things" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v1/thing-services/things'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'key' in params:
            query_params['key'] = params['key']
        if 'value' in params:
            query_params['value'] = params['value']
        if 'sort_key' in params:
            query_params['sortKey'] = params['sort_key']
        if 'sort_order' in params:
            query_params['sortOrder'] = params['sort_order']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['tokenAuthScheme']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageThing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_things_by_filter(self, filter, **kwargs):
        """
        Get a page of things by filter
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_things_by_filter(filter, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ThingFilter filter: The filter criteria on which to return paginated things (required)
        :return: PageThing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_things_by_filter_with_http_info(filter, **kwargs)
        else:
            (data) = self.get_things_by_filter_with_http_info(filter, **kwargs)
            return data

    def get_things_by_filter_with_http_info(self, filter, **kwargs):
        """
        Get a page of things by filter
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_things_by_filter_with_http_info(filter, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ThingFilter filter: The filter criteria on which to return paginated things (required)
        :return: PageThing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_things_by_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'filter' is set
        if ('filter' not in params) or (params['filter'] is None):
            raise ValueError("Missing the required parameter `filter` when calling `get_things_by_filter`")

        resource_path = '/v1/thing-services/things/actions/getPageByFilter'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['tokenAuthScheme']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageThing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def merge_thing(self, thing_uid, thing_update_request, **kwargs):
        """
        Update thing by thingUid and partial input
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.merge_thing(thing_uid, thing_update_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str thing_uid: Uid of thing (required)
        :param ThingUpdateRequest thing_update_request: The fields in the referenced thing to be merged to the persisted thing (required)
        :return: Thing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.merge_thing_with_http_info(thing_uid, thing_update_request, **kwargs)
        else:
            (data) = self.merge_thing_with_http_info(thing_uid, thing_update_request, **kwargs)
            return data

    def merge_thing_with_http_info(self, thing_uid, thing_update_request, **kwargs):
        """
        Update thing by thingUid and partial input
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.merge_thing_with_http_info(thing_uid, thing_update_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str thing_uid: Uid of thing (required)
        :param ThingUpdateRequest thing_update_request: The fields in the referenced thing to be merged to the persisted thing (required)
        :return: Thing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thing_uid', 'thing_update_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method merge_thing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thing_uid' is set
        if ('thing_uid' not in params) or (params['thing_uid'] is None):
            raise ValueError("Missing the required parameter `thing_uid` when calling `merge_thing`")
        # verify the required parameter 'thing_update_request' is set
        if ('thing_update_request' not in params) or (params['thing_update_request'] is None):
            raise ValueError("Missing the required parameter `thing_update_request` when calling `merge_thing`")

        resource_path = '/v1/thing-services/things/{thingUid}'.replace('{format}', 'json')
        path_params = {}
        if 'thing_uid' in params:
            path_params['thingUid'] = params['thing_uid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'thing_update_request' in params:
            body_params = params['thing_update_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['tokenAuthScheme']

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Thing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_thing(self, thing_uid, thing_update_request, **kwargs):
        """
        Update thing by thingUid
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_thing(thing_uid, thing_update_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str thing_uid: Uid of thing (required)
        :param ThingUpdateRequest thing_update_request: The complete list of field and their values to be updated (required)
        :return: Thing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_thing_with_http_info(thing_uid, thing_update_request, **kwargs)
        else:
            (data) = self.update_thing_with_http_info(thing_uid, thing_update_request, **kwargs)
            return data

    def update_thing_with_http_info(self, thing_uid, thing_update_request, **kwargs):
        """
        Update thing by thingUid
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_thing_with_http_info(thing_uid, thing_update_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str thing_uid: Uid of thing (required)
        :param ThingUpdateRequest thing_update_request: The complete list of field and their values to be updated (required)
        :return: Thing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['thing_uid', 'thing_update_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_thing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'thing_uid' is set
        if ('thing_uid' not in params) or (params['thing_uid'] is None):
            raise ValueError("Missing the required parameter `thing_uid` when calling `update_thing`")
        # verify the required parameter 'thing_update_request' is set
        if ('thing_update_request' not in params) or (params['thing_update_request'] is None):
            raise ValueError("Missing the required parameter `thing_update_request` when calling `update_thing`")

        resource_path = '/v1/thing-services/things/{thingUid}'.replace('{format}', 'json')
        path_params = {}
        if 'thing_uid' in params:
            path_params['thingUid'] = params['thing_uid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'thing_update_request' in params:
            body_params = params['thing_update_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['tokenAuthScheme']

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Thing',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

#Copyright (c) 2016 by Cisco Systems, Inc. All rights reserved.
# coding: utf-8

"""
    API Documentation


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ThingIdentifier(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, mac_address=None, manufacturing_id=None, serial_number=None):
        """
        ThingIdentifier - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'mac_address': 'str',
            'manufacturing_id': 'str',
            'serial_number': 'str'
        }

        self.attribute_map = {
            'mac_address': 'macAddress',
            'manufacturing_id': 'manufacturingId',
            'serial_number': 'serialNumber'
        }

        self._mac_address = mac_address
        self._manufacturing_id = manufacturing_id
        self._serial_number = serial_number

    @property
    def mac_address(self):
        """
        Gets the mac_address of this ThingIdentifier.


        :return: The mac_address of this ThingIdentifier.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """
        Sets the mac_address of this ThingIdentifier.


        :param mac_address: The mac_address of this ThingIdentifier.
        :type: str
        """

        self._mac_address = mac_address

    @property
    def manufacturing_id(self):
        """
        Gets the manufacturing_id of this ThingIdentifier.


        :return: The manufacturing_id of this ThingIdentifier.
        :rtype: str
        """
        return self._manufacturing_id

    @manufacturing_id.setter
    def manufacturing_id(self, manufacturing_id):
        """
        Sets the manufacturing_id of this ThingIdentifier.


        :param manufacturing_id: The manufacturing_id of this ThingIdentifier.
        :type: str
        """

        self._manufacturing_id = manufacturing_id

    @property
    def serial_number(self):
        """
        Gets the serial_number of this ThingIdentifier.


        :return: The serial_number of this ThingIdentifier.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this ThingIdentifier.


        :param serial_number: The serial_number of this ThingIdentifier.
        :type: str
        """

        self._serial_number = serial_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

#Copyright (c) 2016 by Cisco Systems, Inc. All rights reserved.
# coding: utf-8

"""
    API Documentation


    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ThingCreateRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, uid=None, section_schemas=None, sections=None, unique_identifiers=None, data_path_profile_uid=None):
        """
        ThingCreateRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'uid': 'str',
            'section_schemas': 'list[SectionSchemaPair]',
            'sections': 'dict(str, object)',
            'unique_identifiers': 'ThingIdentifier',
            'data_path_profile_uid': 'str'
        }

        self.attribute_map = {
            'uid': 'uid',
            'section_schemas': 'sectionSchemas',
            'sections': 'sections',
            'unique_identifiers': 'uniqueIdentifiers',
            'data_path_profile_uid': 'dataPathProfileUid'
        }

        self._uid = uid
        self._section_schemas = section_schemas
        self._sections = sections
        self._unique_identifiers = unique_identifiers
        self._data_path_profile_uid = data_path_profile_uid

    @property
    def uid(self):
        """
        Gets the uid of this ThingCreateRequest.


        :return: The uid of this ThingCreateRequest.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this ThingCreateRequest.


        :param uid: The uid of this ThingCreateRequest.
        :type: str
        """

        self._uid = uid

    @property
    def section_schemas(self):
        """
        Gets the section_schemas of this ThingCreateRequest.


        :return: The section_schemas of this ThingCreateRequest.
        :rtype: list[SectionSchemaPair]
        """
        return self._section_schemas

    @section_schemas.setter
    def section_schemas(self, section_schemas):
        """
        Sets the section_schemas of this ThingCreateRequest.


        :param section_schemas: The section_schemas of this ThingCreateRequest.
        :type: list[SectionSchemaPair]
        """

        self._section_schemas = section_schemas

    @property
    def sections(self):
        """
        Gets the sections of this ThingCreateRequest.


        :return: The sections of this ThingCreateRequest.
        :rtype: dict(str, object)
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """
        Sets the sections of this ThingCreateRequest.


        :param sections: The sections of this ThingCreateRequest.
        :type: dict(str, object)
        """

        self._sections = sections

    @property
    def unique_identifiers(self):
        """
        Gets the unique_identifiers of this ThingCreateRequest.


        :return: The unique_identifiers of this ThingCreateRequest.
        :rtype: ThingIdentifier
        """
        return self._unique_identifiers

    @unique_identifiers.setter
    def unique_identifiers(self, unique_identifiers):
        """
        Sets the unique_identifiers of this ThingCreateRequest.


        :param unique_identifiers: The unique_identifiers of this ThingCreateRequest.
        :type: ThingIdentifier
        """

        self._unique_identifiers = unique_identifiers

    @property
    def data_path_profile_uid(self):
        """
        Gets the data_path_profile_uid of this ThingCreateRequest.


        :return: The data_path_profile_uid of this ThingCreateRequest.
        :rtype: str
        """
        return self._data_path_profile_uid

    @data_path_profile_uid.setter
    def data_path_profile_uid(self, data_path_profile_uid):
        """
        Sets the data_path_profile_uid of this ThingCreateRequest.


        :param data_path_profile_uid: The data_path_profile_uid of this ThingCreateRequest.
        :type: str
        """

        self._data_path_profile_uid = data_path_profile_uid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

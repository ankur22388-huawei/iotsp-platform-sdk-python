# coding: utf-8

"""
    API Documentation

    Credential Management holds credentials for things and users.  Credential Management can import or create new credentials for a thing/user, authenticate credentials, reset credentials and delete credentials.

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class UserCredentialsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def authenticate_credential(self, credential, **kwargs):
        """
        Authenticates credential with credential object.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.authenticate_credential(credential, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Secret credential: authenticate credentials (required)
        :return: UserCredentialResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.authenticate_credential_with_http_info(credential, **kwargs)
        else:
            (data) = self.authenticate_credential_with_http_info(credential, **kwargs)
            return data

    def authenticate_credential_with_http_info(self, credential, **kwargs):
        """
        Authenticates credential with credential object.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.authenticate_credential_with_http_info(credential, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Secret credential: authenticate credentials (required)
        :return: UserCredentialResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['credential']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method authenticate_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'credential' is set
        if ('credential' not in params) or (params['credential'] is None):
            raise ValueError("Missing the required parameter `credential` when calling `authenticate_credential`")

        resource_path = '/v1/user-services/credentials/actions/authenticate'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'credential' in params:
            body_params = params['credential']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['tokenAuthScheme']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserCredentialResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_credential(self, user_credential_request, **kwargs):
        """
        Creates or imports credential for a user.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_credential(user_credential_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserBaseCredential user_credential_request: credential to create (required)
        :return: UserCredentialResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_credential_with_http_info(user_credential_request, **kwargs)
        else:
            (data) = self.create_credential_with_http_info(user_credential_request, **kwargs)
            return data

    def create_credential_with_http_info(self, user_credential_request, **kwargs):
        """
        Creates or imports credential for a user.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_credential_with_http_info(user_credential_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserBaseCredential user_credential_request: credential to create (required)
        :return: UserCredentialResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_credential_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_credential_request' is set
        if ('user_credential_request' not in params) or (params['user_credential_request'] is None):
            raise ValueError("Missing the required parameter `user_credential_request` when calling `create_credential`")

        resource_path = '/v1/user-services/credentials'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_credential_request' in params:
            body_params = params['user_credential_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['tokenAuthScheme']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserCredentialResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_credential(self, credential_uid, **kwargs):
        """
        Delete credential of user.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_credential(credential_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str credential_uid: Uid of object (required)
        :return: UserCredentialResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_credential_with_http_info(credential_uid, **kwargs)
        else:
            (data) = self.delete_credential_with_http_info(credential_uid, **kwargs)
            return data

    def delete_credential_with_http_info(self, credential_uid, **kwargs):
        """
        Delete credential of user.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_credential_with_http_info(credential_uid, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str credential_uid: Uid of object (required)
        :return: UserCredentialResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['credential_uid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'credential_uid' is set
        if ('credential_uid' not in params) or (params['credential_uid'] is None):
            raise ValueError("Missing the required parameter `credential_uid` when calling `delete_credential`")

        resource_path = '/v1/user-services/credentials/{credentialUid}'.replace('{format}', 'json')
        path_params = {}
        if 'credential_uid' in params:
            path_params['credentialUid'] = params['credential_uid']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['tokenAuthScheme']

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserCredentialResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def reset_credential(self, user_credential_request, **kwargs):
        """
        Resets credential with generated or imported credential.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_credential(user_credential_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserBaseCredential user_credential_request: reset credential (required)
        :return: UserCredentialResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.reset_credential_with_http_info(user_credential_request, **kwargs)
        else:
            (data) = self.reset_credential_with_http_info(user_credential_request, **kwargs)
            return data

    def reset_credential_with_http_info(self, user_credential_request, **kwargs):
        """
        Resets credential with generated or imported credential.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reset_credential_with_http_info(user_credential_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UserBaseCredential user_credential_request: reset credential (required)
        :return: UserCredentialResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_credential_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_credential_request' is set
        if ('user_credential_request' not in params) or (params['user_credential_request'] is None):
            raise ValueError("Missing the required parameter `user_credential_request` when calling `reset_credential`")

        resource_path = '/v1/user-services/credentials/actions/reset'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_credential_request' in params:
            body_params = params['user_credential_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['tokenAuthScheme']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UserCredentialResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

#Copyright (c) 2016 by Cisco Systems, Inc. All rights reserved.
# coding: utf-8

"""
    API documentation for Things Registration

    APIs for Thing Registration

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Thing(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, make=None, model=None, firmware_version=None, hardware_version=None, unique_identifiers=None):
        """
        Thing - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'make': 'str',
            'model': 'str',
            'firmware_version': 'str',
            'hardware_version': 'str',
            'unique_identifiers': 'UniqueIdentifier'
        }

        self.attribute_map = {
            'make': 'make',
            'model': 'model',
            'firmware_version': 'firmwareVersion',
            'hardware_version': 'hardwareVersion',
            'unique_identifiers': 'uniqueIdentifiers'
        }

        self._make = make
        self._model = model
        self._firmware_version = firmware_version
        self._hardware_version = hardware_version
        self._unique_identifiers = unique_identifiers

    @property
    def make(self):
        """
        Gets the make of this Thing.


        :return: The make of this Thing.
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """
        Sets the make of this Thing.


        :param make: The make of this Thing.
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """
        Gets the model of this Thing.


        :return: The model of this Thing.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this Thing.


        :param model: The model of this Thing.
        :type: str
        """

        self._model = model

    @property
    def firmware_version(self):
        """
        Gets the firmware_version of this Thing.


        :return: The firmware_version of this Thing.
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """
        Sets the firmware_version of this Thing.


        :param firmware_version: The firmware_version of this Thing.
        :type: str
        """

        self._firmware_version = firmware_version

    @property
    def hardware_version(self):
        """
        Gets the hardware_version of this Thing.


        :return: The hardware_version of this Thing.
        :rtype: str
        """
        return self._hardware_version

    @hardware_version.setter
    def hardware_version(self, hardware_version):
        """
        Sets the hardware_version of this Thing.


        :param hardware_version: The hardware_version of this Thing.
        :type: str
        """

        self._hardware_version = hardware_version

    @property
    def unique_identifiers(self):
        """
        Gets the unique_identifiers of this Thing.


        :return: The unique_identifiers of this Thing.
        :rtype: UniqueIdentifier
        """
        return self._unique_identifiers

    @unique_identifiers.setter
    def unique_identifiers(self, unique_identifiers):
        """
        Sets the unique_identifiers of this Thing.


        :param unique_identifiers: The unique_identifiers of this Thing.
        :type: UniqueIdentifier
        """

        self._unique_identifiers = unique_identifiers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

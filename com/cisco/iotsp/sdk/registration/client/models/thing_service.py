#Copyright (c) 2016 by Cisco Systems, Inc. All rights reserved.
# coding: utf-8

"""
    API documentation for Things Registration

    APIs for Thing Registration

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ThingService(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, claimed=False, registered=False, request=None, credentials=None, thing_uid=None):
        """
        ThingService - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'claimed': 'bool',
            'registered': 'bool',
            'request': 'dict(str, str)',
            'credentials': 'Secret',
            'thing_uid': 'str'
        }

        self.attribute_map = {
            'claimed': 'claimed',
            'registered': 'registered',
            'request': 'request',
            'credentials': 'credentials',
            'thing_uid': 'thingUid'
        }

        self._claimed = claimed
        self._registered = registered
        self._request = request
        self._credentials = credentials
        self._thing_uid = thing_uid

    @property
    def claimed(self):
        """
        Gets the claimed of this ThingService.


        :return: The claimed of this ThingService.
        :rtype: bool
        """
        return self._claimed

    @claimed.setter
    def claimed(self, claimed):
        """
        Sets the claimed of this ThingService.


        :param claimed: The claimed of this ThingService.
        :type: bool
        """

        self._claimed = claimed

    @property
    def registered(self):
        """
        Gets the registered of this ThingService.


        :return: The registered of this ThingService.
        :rtype: bool
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """
        Sets the registered of this ThingService.


        :param registered: The registered of this ThingService.
        :type: bool
        """

        self._registered = registered

    @property
    def request(self):
        """
        Gets the request of this ThingService.


        :return: The request of this ThingService.
        :rtype: dict(str, str)
        """
        return self._request

    @request.setter
    def request(self, request):
        """
        Sets the request of this ThingService.


        :param request: The request of this ThingService.
        :type: dict(str, str)
        """

        self._request = request

    @property
    def credentials(self):
        """
        Gets the credentials of this ThingService.


        :return: The credentials of this ThingService.
        :rtype: Secret
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """
        Sets the credentials of this ThingService.


        :param credentials: The credentials of this ThingService.
        :type: Secret
        """

        self._credentials = credentials

    @property
    def thing_uid(self):
        """
        Gets the thing_uid of this ThingService.


        :return: The thing_uid of this ThingService.
        :rtype: str
        """
        return self._thing_uid

    @thing_uid.setter
    def thing_uid(self, thing_uid):
        """
        Sets the thing_uid of this ThingService.


        :param thing_uid: The thing_uid of this ThingService.
        :type: str
        """

        self._thing_uid = thing_uid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

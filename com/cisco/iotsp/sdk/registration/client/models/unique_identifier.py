#Copyright (c) 2016 by Cisco Systems, Inc. All rights reserved.
# coding: utf-8

"""
    API documentation for Things Registration

    APIs for Thing Registration

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UniqueIdentifier(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, mac_address=None, serial_number=None, manufacturing_id=None):
        """
        UniqueIdentifier - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'mac_address': 'str',
            'serial_number': 'str',
            'manufacturing_id': 'str'
        }

        self.attribute_map = {
            'mac_address': 'macAddress',
            'serial_number': 'serialNumber',
            'manufacturing_id': 'manufacturingId'
        }

        self._mac_address = mac_address
        self._serial_number = serial_number
        self._manufacturing_id = manufacturing_id

    @property
    def mac_address(self):
        """
        Gets the mac_address of this UniqueIdentifier.


        :return: The mac_address of this UniqueIdentifier.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """
        Sets the mac_address of this UniqueIdentifier.


        :param mac_address: The mac_address of this UniqueIdentifier.
        :type: str
        """

        self._mac_address = mac_address

    @property
    def serial_number(self):
        """
        Gets the serial_number of this UniqueIdentifier.


        :return: The serial_number of this UniqueIdentifier.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this UniqueIdentifier.


        :param serial_number: The serial_number of this UniqueIdentifier.
        :type: str
        """

        self._serial_number = serial_number

    @property
    def manufacturing_id(self):
        """
        Gets the manufacturing_id of this UniqueIdentifier.


        :return: The manufacturing_id of this UniqueIdentifier.
        :rtype: str
        """
        return self._manufacturing_id

    @manufacturing_id.setter
    def manufacturing_id(self, manufacturing_id):
        """
        Sets the manufacturing_id of this UniqueIdentifier.


        :param manufacturing_id: The manufacturing_id of this UniqueIdentifier.
        :type: str
        """

        self._manufacturing_id = manufacturing_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
